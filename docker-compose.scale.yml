version: '3.8'

services:
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - classifier-1
      - classifier-2
      - classifier-3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  classifier-1:
    build: .
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY_1}
      - INSTANCE_ID=classifier-1
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://classifier:${DB_PASSWORD}@postgres:5432/classifier_db
      - FLASK_ENV=production
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  classifier-2:
    build: .
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY_2}
      - INSTANCE_ID=classifier-2
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://classifier:${DB_PASSWORD}@postgres:5432/classifier_db
      - FLASK_ENV=production
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  classifier-3:
    build: .
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY_3}
      - INSTANCE_ID=classifier-3
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://classifier:${DB_PASSWORD}@postgres:5432/classifier_db
      - FLASK_ENV=production
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=classifier_db
      - POSTGRES_USER=classifier
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U classifier -d classifier_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for async processing
  celery-worker:
    build: .
    command: celery -A src.async_classifier.celery_app worker --loglevel=info --concurrency=4
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY_1}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://classifier:${DB_PASSWORD}@postgres:5432/classifier_db
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    volumes:
      - ./src:/app/src

  # Celery beat for scheduled tasks
  celery-beat:
    build: .
    command: celery -A src.async_classifier.celery_app beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://classifier:${DB_PASSWORD}@postgres:5432/classifier_db
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    volumes:
      - ./src:/app/src

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
